package com.example.demo.core.config;

import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.net.InetAddress;
import java.net.UnknownHostException;

/**
 * elasticsearch 配置类
 * @author felix
 */
@Configuration
public class ElasticsearchRestClientConfig {
    private static final int ADDRESS_LENGTH = 2;
    private static final String HTTP_SCHEME = "http";
    private final Logger logger = LoggerFactory.getLogger(ElasticsearchRestClientConfig.class);
    /**
     * 集群地址，多个用逗号分隔
     *
     */
    @Value("${spring.elasticsearch.ips}")
    private String[] ipAddress;

    /**
     * 连接超时时间
     */
    @Value("${spring.elasticsearch.connection-timeout}")
    private int connectTimeOut;
    private static int socketTimeOut = 30000; // 连接超时时间
    private static int connectionRequestTimeOut = 500; // 获取连接的超时时间

    private static int maxConnectNum = 100; // 最大连接数
    private static int maxConnectPerRoute = 100; // 最大路由连接数

    //ES用户名
    @Value("${spring.elasticsearch.username:#{null}}")
    private String username;
    //ES密码
    @Value("${spring.elasticsearch.password:#{null}}")
    private String password;
    @Value("${spring.elasticsearch.cluster.name:#{null}}")
    private String clusterName;
    /**
     * 连接池
     */
    @Value("${spring.elasticsearch.pool}")
    private String poolSize;

    //对ES2.0有效
    @Bean
    public TransportClient transportClient() {
        logger.info("Elasticsearch初始化开始。。。。。");
        TransportClient transportClient = null;

        // 配置信息
        Settings esSetting = Settings.builder()
                .put("cluster.name", clusterName) //集群名字
                .put("client.transport.sniff", true)//增加嗅探机制，找到ES集群
                .put("thread_pool.search.size", Integer.parseInt(poolSize))//增加线程池个数，暂时设为5
                .build();
        //配置信息Settings自定义
        //transportClient = new PreBuiltTransportClient(esSetting);
        transportClient = new TransportClient.Builder().settings(esSetting).build();
        try {
            InetSocketTransportAddress transportAddress = new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"),9200);//

            transportClient.addTransportAddresses(transportAddress);
        } catch (UnknownHostException e){
            logger.error("Host Unknown");
        }

        return transportClient;
    };


}
